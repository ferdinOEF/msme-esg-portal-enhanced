// prisma/schema.prisma - CORRECTED VERSION
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(VIEWER)

  companies Company[] @relation("UserCompanies")
  tokens    Session[]
  auditLogs AuditLog[]

  @@map("users")
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  website     String?
  address     String?
  contact     String?
  entityId    String?

  // Compliance status
  complianceStatus Json? // Store current compliance checklist

  // Relations
  esgPlans     ESGPlan[]
  applications UserApplication[]

  @@map("companies")
}

model Scheme {
  id        Int        @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String   @unique
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  description String?
  published   Boolean   @default(false)
  issuer      String?
  url         String?

  // Enhanced categorization
  jurisdiction String   @default("Central") // Central, State, Global
  sector       String[] // Multiple sectors
  companySize  CompanySize[] // Applicable company sizes

  // ESG categorization
  pillarE      Boolean  @default(false)
  pillarS      Boolean  @default(false)
  pillarG      Boolean  @default(false)

  // Application deta
}

model ESGPlan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])

  steps     Json?
}

model UserApplication {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])

  status    ApplicationStatus @default(INTERESTED)
  notes     String?
}

model Session {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  expiresAt  DateTime
  token      String   @unique
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  action    String
  entity    String
  entityId  String

  oldValues Json?
  newValues Json?

  ipAddress String?
  userAgent String?

  @@index([userId, createdAt])
  @@index([entity, entityId])
  @@map("audit_logs")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  color       String?
  icon        String?
  parentId    Int?
  parent      Category?   @relation("CategoryToChildren", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryToChildren")
  schemes     Scheme[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}


// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  CONSULTANT
  VIEWER
}

enum CompanySize {
  MICRO
  SMALL
  MEDIUM
  LARGE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ApplicationStatus {
  INTERESTED
  APPLIED
  UNDER_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}
